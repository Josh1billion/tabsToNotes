function stringAndFretToNote(stringIndex, fretNumber) {
	// check to see whether this string shouldn't be played
	if (fretNumber == '-' || fretNumber == 'x' || fretNumber =='X')
		return '---';

	// check for synonyms for the open string
	if (fretNumber == 'o' || fretNumber == 'O')
		fretNumber = 0;

	// convert JavaScript strings to JavaScript numbers
	fretNumber = parseInt(fretNumber);
	stringIndex = parseInt(stringIndex);

	// constant values
	var notesOnFretboard = [
		['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D'],
		['B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A'],
		['G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F'],
		['D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'c', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C'],
		['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G'],
		['E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D']
	];

	// check for invalid input
	if (typeof stringIndex != 'number' || stringIndex < 0 || stringIndex > notesOnFretboard.length) {
		console.log('Invalid stringIndex specified to stringAndFretToNote().  Accepted values are 0 through ' + notesOnFretboard.length);
	}
	else if (typeof fretNumber != 'number') {
		console.log('Invalid value specified for fretNumber to stringAndFretToNote(): ' + fretNumber + '.  Must be a number, but it was a ' + (typeof fretNumber));
	}
	else if (fretNumber >= notesOnFretboard[stringIndex].length) {
		console.log('Error: you specified fret ' + fretNumber + ' to stringAndFretToNote(), but it only supports ' + (notesOnFretboard[stringIndex].length - 1) + ' frets (and 0 to indicate the open string).');
	}
	else if (fretNumber < 0) {
		console.log('Fret number ' + fretNumber + ' is invalid as a parameter for stringAndFretToNote()');
	}
	
	// get the resulting note, and add dash(es) if necessary to make the length 3 (so everything lines up later when displaying all notes, since some notes like C# have two characters)
	var result = notesOnFretboard[stringIndex][fretNumber];
	while (result.length < 3) {
		result += '-';
	}

	return result;
}

function getTabsForString(tabs, stringIndex) {
	// get the line associated with the given stringIndex
	return tabs.split("\n")[stringIndex];
}

function cleanUpTabs(initialTabString) {
	// remove everything except numbers, dashes, and newlines
	var tabs = initialTabString.match(/([0-9]|-|\n)/gi).join("");
	return tabs;
}

function getNoteAtTime(tabs, options) {
	var stringIndex = options.string;
	var timeIndex = options.time;

	var tabsForTheString = getTabsForString(tabs, stringIndex);
	var fretPlayed = tabsForTheString.charAt(timeIndex);

	return stringAndFretToNote(stringIndex, fretPlayed);
}

function tabsToNotes(input) {
	var result = '';

	tabs = cleanUpTabs(input); // remove any unnecessary characters
	var tabsArr = tabs.split("\n"); // convert to array, where each index represents a guitar string

	for (var stringIndex = 0; stringIndex < tabsArr.length; stringIndex++) {
		// start a newline before every string except the first one
		if (stringIndex > 0)
			result += '|\n';

		result += '|--';

		for (var timeIndex = 0; timeIndex < tabsArr[stringIndex].length; timeIndex++) {
			var note = getNoteAtTime(tabs, { string: stringIndex, time: timeIndex });
			result += note;
		}
	}
	result += '|';

	return result;
}

module.exports = tabsToNotes;
